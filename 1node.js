/*
第一章 node简介
作者是Ryan Dah1
起初，Ryan Dah1 称他的项目为web.js，就是一个web服务器，但是后来演变成一个构建网络应用的基础框架。
node的结构和chrome非常相似，都是基于事件驱动的异步架构，浏览器通过事件驱动来服务界面上的交互，Node通过事件驱动来
服务I/O。
1.4 node的特点
1.4.1 异步I/O
在node中，绝大多数的操作都以异步的方式调用，Ryan Dah1在底层构建来很多异步I/O的api。
1.4.2事件与回调函数
无论前端还是后端，事件监听都是常见的
1.4.3 单线程
单线程的弱点：
i）无法利用多核CPU
i）错误会引起整个应用退出
i）大量计算占用CPU，导致无法继续调用异步I/O
前端使用web workers创建新的进程，让这个进程执行大量的计算工作，并通过事件将结果回传给主进程。
node采取与web workders相同的思路来解决单线程中计算量大的问题，
child_process: 子进程，将计算分发到各个子进程，通过进程间的事件来传递计算结果。
1.4.4 跨平台
1.5 node的应用场景
1.5.1 I/O 密集型
当应用中有很多的网络请求时，node能够有效的组织起更多的硬件资源。并且占用资源也少。
1.5.2 是否不擅长cpu密集型业务
node优秀的运算能力来自于v8的深度性能优化。
合理利用还是可以处理 cpu密集型，也就是运算量大的场景的。
1.5.3 与遗留系统和平共处
旧有的系统提供数据源，node将该数据源当做数据接口，发挥异步并行的优势。
1.5.4 分布式应用
并行查询数据库，充分利用硬件资源
1.6 Node的使用者
i）前后端编程语言环境统一
i）node带来的高性能io用于实时应用
i）并行io使得使用者更高效的利用分布式环境
i）并行io，有效利用稳定接口提升web渲染能力
i）云计算平台提供node支持
i）游戏开发领域
i）工具类应用
*/