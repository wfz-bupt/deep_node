/*
第4章 异步编程
4.1 函数式编程
在js中，函数是一等公民，函数编程是js异步编程的基础。
4.1.1 高阶函数
就是 参数或者返回值为函数的函数
高阶函数有：forEach、map、reduce等
4.1.2 偏函数用法
通过指定部分参数来产生一个新的定制函数的形式就是偏函数
4.2 异步编程的优势和难点
4.2.1 优势
基于事件驱动的非阻塞IO。有主线程和事件池，监听者负责不断的向事件池中添加回调函数，主线程负责不断的拿函数进行执行，例如
fs.read(),执行完之后，主线程就接着执行后面的事件回调了，等到fs.complete触发时，就会往事件池中添加回调函数，然后就可以执行了。
主线程一刻没闲着，即基于事件的非阻塞IO
4.2.2 难点 
1.异常处理
需要将异常传给用户的回调
2.函数嵌套过深
由于下一步的操作依赖于上一步处理的结果，所以，函数会嵌套很深。
3.阻塞代码
？？？
4.多线程编程
利用node进行多线程编程
5.异步转同步
4.3 异步编程解决方案
解决方案有以下3种
事件发布／订阅模式
Promise/Deferred模式
流程控制库
4.3.1 事件发布／订阅模式
node对事件发布订阅的机制做了一些额外的处理。
》如果对一个事件添加了超过10个侦听器，将会得到一些警告
》发射事件的对象对error事件进行了特殊处理
1.继承events模块 例子
在NOde提供的核心模块中，有近半数都继承自EventEmitter。
*/
// 利用发布订阅模式来处理业务
var events = require("events");
function stream(){
    events.EventEmitter.call(this);
}
util.inherits(stream, events.EventEmitter);