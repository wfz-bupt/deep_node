/*
第三章 异步IO
ajax和事件是典型的异步应用场景
将异步作为主要编程方式和设计理念的，在众多高级语言和运行平台中，node是第一个，其他语言屏蔽了异步，基本采用同步阻塞的方式进行编程
node的基调：异步io、事件驱动和单线程。
与node的事件驱动、异步io设计理念比较接近的一个知名产品是Nginx，Nginx具备面向客户端管理连接的强大能力，但是它的背后，依然受限
于各种同步方式的编程语言，但是Node既可以作为服务器端去处理客户端带来的大量并发请求，也能作为客户端向网络中的应用进行并发请求。
3.1 为什么要异步IO
3.1.1 用户体验
不同的IO类型及对应的开销
CPU一级缓存  3     CPU二级缓存 14     内存：250     硬盘：41000000    网络：240000000
3.1.2 资源分配
计算机在 发展过程中，将组件进行了抽象，分为io设备和计算设备
单线程同步编程模型会因阻塞io导致硬件资源得不到更优的使用，多线程编程模型也因为编程中的死锁、状态同步等问题，让开发
人员头疼。
Node利用单线程，但是异步io，让资源分配更高效。Node的一大特色，是异步IO
3.2 异步IO实现现状
3.2.1 异步IO与非阻塞IO
非阻塞和异步不是一回事。非阻塞通过轮询的方式，来确认IO操作是否完成。不断的轮询会造成资源浪费。
3.2.2 理想的非阻塞异步IO
不需要通过轮询来判断IO操作是否完成，只需在操作完成的时候，通过信号或者回调传递给应用程序。
3.2.3 现实的异步IO
因为计算机资源被抽象成了文件，例如，磁盘文件、硬件、套接字等，所以，IO操作可以统一为文件的读和写
实现方式为：线程池模拟IO。
所以，我们说的js是单线程的，本质上是Node底层利用线程池实现的。还是多线程。
3.3 Node的异步IO
3.3.1 事件循环
Node自身的执行模型－－事件循环，在进程启动时，Node会创建一个类似于while(true)的循环，每执行一次循环体的过程称
为trick，它看看是否有事件待处理。事件池
3.3.2 观察者
产生事件，并将事件加入事件池，供trick处理。
3.3.3 请求对象
调用fs.open其实是在调用c＋＋的内建模块，内奸模块再次调用fs.c中的uv_fs_open方法。此方法的执行是由线程池中的IO
线程负责。
在js和c通过请求对象来通信。
3.3。4 执行回调
js是单线程的，但是node是多线程的。
3.4 非IO的异步API
Node中还存在一些与IO无关的异步API，分别是setTimeout、setInterval setImmediate  process.nextTick
3.4.1 定时器
定时器也会向 事件池中加入事件，等待设定的时间而已。
3.4.2 process.nextTick
立即异步执行一个任务，process.nextTick
3.4.3 setImmediate
与process.nextTick类似，但是有细微差别
3.5 事件驱动与高性能服务器
几种经典的服务器模型，i）同步式 i）每进程/每请求，为每个请求启动一个进程  i）每线程／每请求（apache），线程比进程
轻量，但是当大量并发来临时，扛不住
Node，事件驱动，底层将请求送入io线程池等待执行，执行完之后将结果送入事件池执行。
*/